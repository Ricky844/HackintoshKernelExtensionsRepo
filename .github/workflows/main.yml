name: Hackintosh Kernel Extensions Repo

on:
  push:
    branches: main
  schedule:
    - cron: '0 22 * * *'

jobs:
  build:
    runs-on: macos-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Package
      run: |
        ## Basic Env
        echo ::set-env name=TAGNAME::"$(date +%Y-%m-%d)"
        mkdir -p release/Lilu
        mkdir -p release/VoodooInput
        git clone -q https://github.com/acidanthera/MacKernelSDK.git

        ## Lilu Basic Dependency
        echo "==========================================================================="
        echo "========================> Building Lilu Dependency <======================="
        echo "==========================================================================="
        git clone -q https://github.com/acidanthera/Lilu.git && cd Lilu
        cp -r ../MacKernelSDK .
        xcodebuild -configuration Debug > /dev/null 2>&1
        xcodebuild -configuration Release > /dev/null 2>&1
        cd ..
        cp Lilu/build/*/*.zip release/Lilu/
        
        ## VoodooInput Basic Dependency
        echo "==========================================================================="
        echo "=======================> Building Input Dependency <======================="
        echo "==========================================================================="
        git clone -q https://github.com/acidanthera/VoodooInput.git && cd VoodooInput
        cp -r ../MacKernelSDK .
        xcodebuild -configuration Debug > /dev/null 2>&1
        xcodebuild -configuration Release > /dev/null 2>&1
        cd ..
        cp VoodooInput/build/*/*.zip release/VoodooInput/
        
        ## KernelExtensions
        ### LiluPlugins
        echo "==========================================================================="
        echo "===================> Building Acidanthera Lilu Plugins <==================="
        echo "==========================================================================="
        liluPlugins=(
          'AirportBrcmFixup,https://github.com/acidanthera/AirportBrcmFixup.git'
          'AppleALC,https://github.com/acidanthera/AppleALC.git'
          'BrightnessKeys,https://github.com/acidanthera/BrightnessKeys'
          'CPUFriend,https://github.com/acidanthera/CPUFriend.git'
          'CpuTscSync,https://github.com/lvs1974/CpuTscSync.git'
          'DebugEnhancer,https://github.com/acidanthera/DebugEnhancer.git'
          'HibernationFixup,https://github.com/acidanthera/HibernationFixup.git'
          'NVMeFix,https://github.com/acidanthera/NVMeFix.git'
          'RTCMemoryFixup,https://github.com/acidanthera/RTCMemoryFixup.git'
          'VirtualSMC,https://github.com/acidanthera/VirtualSMC.git'
          'WhateverGreen,https://github.com/acidanthera/WhateverGreen.git'
        )
        for plugin in ${liluPlugins[*]}; do
          echo "===================> Building ${plugin%,*} "
          mkdir -p release/${plugin%,*}
          git clone -q ${plugin##*,} ${plugin%,*} -b master --depth=1
          cd ${plugin%,*}
          cp -Rf ../Lilu/build/Debug/Lilu.kext .
          cp -r ../MacKernelSDK .
          xcodebuild -configuration Debug > /dev/null 2>&1
          xcodebuild -configuration Release > /dev/null 2>&1
          if [ -e build/Release/*.zip ]; then
            cp -f build/*/*.zip ../release/${plugin%,*}
          else
            mkdir -p ../release/${plugin%,*}/Debug
            mkdir -p ../release/${plugin%,*}/Release
            cp -Rf build/Debug/*.kext ../release/${plugin%,*}/Debug
            cp -Rf build/Release/*.kext ../release/${plugin%,*}/Release
          fi
          cd ../
        done
        
        ### OtherMaintainLiluPlugins
        echo "==========================================================================="
        echo "==================> Building OtherMaintain Lilu Plugins <=================="
        echo "==========================================================================="
        otherMaintainLiluPlugins=(
          'AMFIExemption,https://github.com/osy86/AMFIExemption.git'
          'ATH9KFixup,https://github.com/chunnann/ATH9KFixup.git'
          'DiskArbitrationFixup,https://github.com/Goldfish64/DiskArbitrationFixup.git'
          'Innie,https://github.com/cdf/Innie.git'
          'MacProMemoryNotificationDisabler,https://github.com/IOIIIO/MacProMemoryNotificationDisabler.git'
          'NightShiftEnabler,https://github.com/cdf/NightShiftEnabler.git'
          'NoTouchID,https://github.com/al3xtjames/NoTouchID.git'
          'SystemProfilerMemoryFixup,https://github.com/Goldfish64/SystemProfilerMemoryFixup.git'
          'ThunderboltReset,https://github.com/osy86/ThunderboltReset.git'
        )
        for plugin in ${otherMaintainLiluPlugins[*]}; do
          echo "===================> Building ${plugin%,*} "
          mkdir -p release/${plugin%,*}
          git clone -q ${plugin##*,} ${plugin%,*} -b master --depth=1
          cd ${plugin%,*}
          if [[ "${plugin%,*}" != "ATH9KFixup" ]] ; then
            wget -q https://github.com/acidanthera/Lilu/releases/download/1.4.7/Lilu-1.4.7-DEBUG.zip
            unzip -q Lilu-1.4.7-DEBUG.zip && rm -rf Lilu-1.4.7-DEBUG.zip
          fi
          xcodebuild -configuration Debug > /dev/null 2>&1
          xcodebuild -configuration Release > /dev/null 2>&1
          if [ -e build/Release/*.zip ]; then
            cp -f build/*/*.zip ../release/${plugin%,*}
          else
            mkdir -p ../release/${plugin%,*}/Debug
            mkdir -p ../release/${plugin%,*}/Release
            cp -Rf build/Debug/*.kext ../release/${plugin%,*}/Debug
            cp -Rf build/Release/*.kext ../release/${plugin%,*}/Release
          fi
          cd ../
        done
        
        ### EthernetPlugins
        echo "==========================================================================="
        echo "=======================> Building Ethernet Plugins <======================="
        echo "==========================================================================="
        ethernetPlugins=(
          'IntelMausi,https://github.com/acidanthera/IntelMausi.git'
          'AtherosE2200Ethernet,https://github.com/Mieze/AtherosE2200Ethernet.git'
          'RTL8111_driver_for_OS_X,https://github.com/Mieze/RTL8111_driver_for_OS_X.git'
          'LucyRTL8125Ethernet,https://github.com/Mieze/LucyRTL8125Ethernet'
          'RealtekRTL8100,https://github.com/Mieze/RealtekRTL8100'
        )
        for plugin in ${ethernetPlugins[*]}; do
          echo "===================> Building ${plugin%,*} "
          mkdir -p release/${plugin%,*}
          git clone -q ${plugin##*,} ${plugin%,*} -b master --depth=1
          cd ${plugin%,*}
          if [[ "${plugin%,*}" == "IntelMausi" ]] ; then
            cp -r ../MacKernelSDK .
            xcodebuild -configuration Debug
            xcodebuild -configuration Release
            cp -Rf build/*/*.zip ../release/${plugin%,*}
          else
            xcodebuild -configuration Debug CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
            xcodebuild -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
            mkdir -p ../release/${plugin%,*}/Debug
            mkdir -p ../release/${plugin%,*}/Release
            cp -Rf build/Debug/*.kext ../release/${plugin%,*}/Debug
            cp -Rf build/Release/*.kext ../release/${plugin%,*}/Release
          fi
          cd ../
        done
        
        ### AcidantheraPlugins
        echo "==========================================================================="
        echo "======================> Building Acidanthera Plugins <====================="
        echo "==========================================================================="
        acidantheraPlugins=(
          'BrcmPatchRAM,https://github.com/acidanthera/BrcmPatchRAM'
        )
        for plugin in ${acidantheraPlugins[*]}; do
          echo "===================> Building ${plugin%,*} "
          mkdir -p release/${plugin%,*}
          git clone -q ${plugin##*,} ${plugin%,*} -b master --depth=1
          cd ${plugin%,*}
          cp -r ../MacKernelSDK .
          xcodebuild -configuration Debug -target Package
          xcodebuild -configuration Release -target Package
          if [ -e build/Products/Release/*.zip ] ; then
            cp -Rf build/Products/Debug/*.zip ../release/${plugin%,*}
            cp -Rf build/Products/Release/*.zip ../release/${plugin%,*}
          else
            mkdir -p ../release/${plugin%,*}/Debug
            mkdir -p ../release/${plugin%,*}/Release
            cp -Rf build/Products/Debug/*.kext ../release/${plugin%,*}/Debug
            cp -Rf build/Products/Release/*.kext ../release/${plugin%,*}/Release
          fi
          cd ../
        done
        
        ### InputPlugins
        echo "==========================================================================="
        echo "=========================> Building Input Plugins <========================"
        echo "==========================================================================="
        inputPlugins=(
          'VoodooPS2,https://github.com/acidanthera/VoodooPS2'
          'VoodooI2C,https://github.com/VoodooI2C/VoodooI2C'
        )
        for plugin in ${inputPlugins[*]}; do
          echo "===================> Building ${plugin%,*} "
          mkdir -p release/${plugin%,*}
          git clone -q ${plugin##*,} ${plugin%,*} --recursive
          cd ${plugin%,*}
          if [[ "${plugin%,*}" == "VoodooPS2" ]] ; then
            cp -r ../MacKernelSDK .
            src=$(/usr/bin/curl -Lfs https://raw.githubusercontent.com/acidanthera/VoodooInput/master/VoodooInput/Scripts/bootstrap.sh) && eval "$src"
            xcodebuild -configuration Debug > /dev/null 2>&1
            xcodebuild -configuration Release > /dev/null 2>&1
            if [ -e build/Products/Release/*.zip ] ; then
              cp -f build/Products/Debug/*.zip ../release/${plugin%,*}
              cp -f build/Products/Release/*.zip ../release/${plugin%,*}
            else
              mkdir -p ../release/${plugin%,*}/Debug
              mkdir -p ../release/${plugin%,*}/Release
              cp -Rf build/Products/Debug/*.kext ../release/${plugin%,*}/Debug
              cp -Rf build/Products/Release/*.kext ../release/${plugin%,*}/Release
            fi
          else
            curl -L https://github.com/alexey-lysiuk/macos-sdk/releases/download/10.12/MacOSX10.12.tar.bz2 -o /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.tar.bz2 && tar -xjf /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.tar.bz2 -C /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
            src=$(/usr/bin/curl -Lfs https://raw.githubusercontent.com/acidanthera/VoodooInput/master/VoodooInput/Scripts/bootstrap.sh) && eval "$src" && mv VoodooInput Dependencies
            pip install cpplint
            pip install git+https://github.com/alexandred/cldoc.git
            echo 'export PATH=~/Library/Python/2.7/bin:$PATH' >> ~/.bashrc
            export PATH=~/Library/Python/2.7/bin:$PATH
            git submodule init && git submodule update
            xcodebuild -workspace "VoodooI2C.xcworkspace" -scheme "VoodooI2C" -sdk macosx10.12 -derivedDataPath build clean build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO
            cd build/Build/Products/Release
            zip -r VoodooI2C-$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "VoodooI2C.kext/Contents/info.plist").zip *.kext
            zip -r VoodooI2C-Debug-Symbols-$(/usr/libexec/PlistBuddy -c "Print CFBundleShortVersionString" "VoodooI2C.kext/Contents/info.plist").zip *.dSYM
            cd -
            cp build/Build/Products/Release/*.zip ../release/${plugin%,*}/
          fi
          cd ../
        done
        
        ### Itlwm
        mkdir -p release/itlwm
        git clone -q https://github.com/OpenIntelWireless/itlwm --depth=5
        cd itlwm && git clone -q https://github.com/acidanthera/MacKernelSDK.git --depth=1
        xcodebuild -scheme itlwm -configuration Debug -derivedDataPath build | xcpretty
        xcodebuild -scheme "AirportItlwm (all)" -configuration Debug -derivedDataPath build | xcpretty
        eval $(grep -m 1 "MODULE_VERSION =" itlwm.xcodeproj/project.pbxproj | tr -d ';' | tr -d '\t' | tr -d " ")
        echo "::set-env name=ITLWM_VER::$MODULE_VERSION"
        cd build/Build/Products/Debug
        zip -r itlwm-v${ITLWM_VER}-DEBUG-alpha.zip itlwm.kext
        while read -r tgt ; do
          zip -r AirportItlwm-${tgt// /_}-v${ITLWM_VER}-DEBUG-alpha.zip "$tgt"
        done < <(find . -mindepth 1 -maxdepth 1 -type d -not -path "*.kext" | cut -c 3-)
        cd -
        cp -Rf build/Build/Products/Debug/*.zip ../release/itlwm/
        cd ../
        
        ### IntelBluetoothFirmware
        mkdir -p release/IntelBluetoothFirmware/Debug
        mkdir -p release/IntelBluetoothFirmware/Release
        git clone -q https://github.com/OpenIntelWireless/IntelBluetoothFirmware.git
        cd IntelBluetoothFirmware && git clone -q https://github.com/acidanthera/MacKernelSDK.git --depth=1
        xcodebuild -alltargets -configuration Debug | xcpretty
        xcodebuild -alltargets -configuration Release | xcpretty
        cp build/Build/Products/Debug/*  ../release/IntelBluetoothFirmware/Debug/
        cp build/Build/Products/Release/*  ../release/IntelBluetoothFirmware/Release/
        cd ..
        
        ## Package
        zip -qry -FS $(date +%Y-%m-%d).zip release

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.TAGNAME }}
        release_name: ${{ env.TAGNAME }}
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.TAGNAME }}.zip
        asset_name: ${{ env.TAGNAME }}.zip
        asset_content_type: application/zip
